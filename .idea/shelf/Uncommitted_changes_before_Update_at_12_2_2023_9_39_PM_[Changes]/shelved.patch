Index: backend/api/printer/models.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import uuid\r\nfrom django.db import models\r\nfrom django.conf import settings\r\nfrom api.auth.models import User\r\nfrom django.contrib.contenttypes.models import ContentType\r\nfrom django.contrib.contenttypes.fields import GenericRelation, GenericForeignKey\r\nfrom compositefk.fields import CompositeForeignKey\r\n# from viewflow.fields import CompositeKey\r\nfrom collections import OrderedDict\r\nfrom mptt.models import MPTTModel, TreeForeignKey\r\nclass ObjectTracking(models.Model):\r\n    created_at = models.DateTimeField(auto_now_add=True)\r\n    updated_at = models.DateTimeField(auto_now=True)\r\n    created_by = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.DO_NOTHING)\r\n    class Meta:\r\n        abstract = True\r\n        ordering = ('-created_at',)\r\n\r\nclass ModelPrinterManager(models.Manager):\r\n    def all_objects(self):\r\n        return super().get_queryset()\r\n\r\nclass ModelPrinter(ObjectTracking):\r\n    model = models.CharField(max_length=12,null=False, blank=False)\r\n    created_by = models.ForeignKey(User, null=True, blank=True, on_delete=models.DO_NOTHING)\r\n    \r\n    objects = ModelPrinterManager()\r\n\r\n    def __str__(self):\r\n        return self.model\r\n\r\n    @property\r\n    def features(self):\r\n        return self.feature_set.all()\r\n\r\nclass FeatureChoices(models.TextChoices):\r\n    SCAN = \"Scan\"\r\n    PRINT = \"Print\"\r\n    Photocopy = \"Photocopy\"\r\n    \r\nclass Feature(models.Model):\r\n    model = models.ForeignKey('ModelPrinter', on_delete=models.CASCADE)\r\n    feature = models.CharField(max_length=10, choices= FeatureChoices.choices,null=True, blank=True)\r\n\r\n    created_at = models.DateTimeField(auto_now_add=True)\r\n    updated_at = models.DateTimeField(auto_now=True)\r\n\r\n\r\n\r\nclass PrinterManager(models.Manager):\r\n    def get_queryset(self):\r\n        return super().get_queryset().filter(status=1)\r\n\r\n    def all_objects(self):\r\n        return super().get_queryset()\r\n\r\n    def inactive(self):\r\n        return self.all_objects().filter(status=2)\r\n\r\nclass Institution(models.IntegerChoices):\r\n    CS1 = 1 , 'Cơ sở 1'\r\n    CS2 = 2, 'Cơ sở 2'\r\n\r\nclass Floor(models.Model):\r\n    building_code = models.ForeignKey(\"Building\", on_delete=models.CASCADE)\r\n    floor_code = models.PositiveIntegerField()\r\n    def __str__(self):\r\n        return f\"{self.building_code} - Tầng {self.floor_code}\"\r\n    \r\nclass Building(models.Model):\r\n    inst = models.IntegerField(choices=Institution.choices, default = Institution.CS1, null = False)\r\n    building = models.CharField(max_length=2)\r\n    # building_of_institution = CompositeKey(columns =['inst','building'])\r\n    \r\n    def __str__(self):\r\n        return f\"Cơ sở {self.inst} - Tòa {self.building}\"\r\n    def save(self, *args, **kwargs):\r\n        \r\n        super().save(*args, **kwargs)\r\n        if self.inst == 2:\r\n            for floor in range(8):\r\n                bldg = Floor(floor_code=floor, building_code=self)\r\n                bldg.save()\r\n        else:\r\n            for floor in range(5):\r\n                bldg = Floor(floor_code=floor, building_code=self)\r\n                bldg.save()\r\nclass PrinterStatus(models.IntegerChoices):\r\n    ACTIVE = 1,'Active'\r\n    OFFLINE = 3, 'Offline'\r\n    ERROR = 4, 'Error'\r\n    BUSY = 5, 'Busy'\r\n    MAINTAINANCE=2, 'Maintenance'\r\n    \r\nclass Printer(models.Model):\r\n    # uuid = models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)\r\n    model = models.ForeignKey(\"ModelPrinter\",  on_delete=models.CASCADE)       \r\n    floor = models.ForeignKey(\r\n        Floor, related_name=\"printer_floor\", on_delete=models.CASCADE\r\n    )\r\n    pages_remaining = models.PositiveIntegerField()\r\n    ink_status = models.BooleanField(default = True)\r\n    status = models.IntegerField(choices = PrinterStatus.choices, default= PrinterStatus.ACTIVE)\r\n    objects = PrinterManager()\r\n    \r\n    # Add a field to store the floor description\r\n    floor_description = models.CharField(max_length=255, blank=True, null=True)\r\n    # def get_tongthoigian(self, orderprinter):\r\n    #     oder_printer.objects.filter(printer = printer_id, is_printed = false)\r\n    #     return sum(mayorde)\r\n    def save(self, *args, **kwargs):\r\n        # Get the floor description from the related Floor object\r\n        if self.floor:\r\n            floor_description = f\"{self.floor.building_code} - Tầng {self.floor.floor_code}\"\r\n            self.floor_description = floor_description\r\n        super().save(*args, **kwargs)\r\n\r\n    def __str__(self):\r\n        return f\"{self.model} - {self.floor_description}\"\r\nclass PrinterViews(ObjectTracking):\r\n    ip = models.CharField(max_length=250)\r\n    printer = models.ForeignKey(\r\n        Printer, related_name=\"printer_views\", on_delete=models.CASCADE\r\n    )\r\n\r\nclass OrderPrinter(models.Model):\r\n    printer = models.ForeignKey('Printer', on_delete=models.SET_NULL, null=True, blank=True)\r\n    user = models.ForeignKey(User, on_delete=models.SET_NULL,null=True,blank=True)\r\n    file_upload = models.FileField( upload_to='local/')\r\n    date_ordered = models.DateTimeField(auto_now_add=True)\r\n    is_printed = models.BooleanField(default=False)\r\n    print_date = models.DateTimeField(null=True, blank=True)\r\n    is_cancelled = models.BooleanField(default=False)\r\n    # @property\r\n    # def get_time(self):\r\n    #     pass khi maf thang user kia xong thi thang nay moi tru\r\n    file_name = models.CharField( max_length=50)\r\n    pages =  models.PositiveIntegerField()\r\n    \r\n    # @property\r\n    def get_time(self):\r\n        return str(self.pages*2)\r\n    \r\n    # def get_pdf_page_count(path):\r\n    #     with open(path, 'rb') as fl:\r\n    #         reader = PdfFileReader(fl)\r\n    #     return reader.getNumPages()\r\n    \r\n    
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/api/printer/models.py b/backend/api/printer/models.py
--- a/backend/api/printer/models.py	(revision e46ae16479e3ae90444be49b1302a015ffff3e1b)
+++ b/backend/api/printer/models.py	(date 1701527737992)
@@ -2,12 +2,14 @@
 from django.db import models
 from django.conf import settings
 from api.auth.models import User
+from collections import deque
 from django.contrib.contenttypes.models import ContentType
 from django.contrib.contenttypes.fields import GenericRelation, GenericForeignKey
 from compositefk.fields import CompositeForeignKey
 # from viewflow.fields import CompositeKey
 from collections import OrderedDict
 from mptt.models import MPTTModel, TreeForeignKey
+from django.utils import timezone
 class ObjectTracking(models.Model):
     created_at = models.DateTimeField(auto_now_add=True)
     updated_at = models.DateTimeField(auto_now=True)
@@ -114,7 +116,29 @@
             floor_description = f"{self.floor.building_code} - Tầng {self.floor.floor_code}"
             self.floor_description = floor_description
         super().save(*args, **kwargs)
+    order_queue = deque()
 
+    def add_to_queue(self, order):
+        """
+        Add an order to the printer's queue.
+        """
+        self.order_queue.append(order)
+
+    def process_next_order(self):
+        """
+        Process the next order in the queue.
+        """
+        if self.order_queue:
+            next_order = self.order_queue.popleft()
+            next_order.print_date = timezone.now()
+            next_order.is_printed = True
+            next_order.save()
+            self.pages_remaining -= next_order.pages
+            self.ink_status = False  # Update ink status or any other relevant attributes
+            self.save()
+            return next_order
+        else:
+            return None
     def __str__(self):
         return f"{self.model} - {self.floor_description}"
 class PrinterViews(ObjectTracking):
@@ -134,12 +158,9 @@
     # @property
     # def get_time(self):
     #     pass khi maf thang user kia xong thi thang nay moi tru
-    file_name = models.CharField( max_length=50)
+    file_name = models.CharField(max_length=50)
     pages =  models.PositiveIntegerField()
-    
-    # @property
-    def get_time(self):
-        return str(self.pages*2)
+
     
     # def get_pdf_page_count(path):
     #     with open(path, 'rb') as fl:
Index: backend/api/printer/serializers.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from rest_framework import serializers\r\n\r\nfrom .models import ModelPrinter, Feature, OrderPrinter, Printer, Floor, Building, Institution, PrinterViews\r\n\r\n\r\nclass FeatureSerializer(serializers.ModelSerializer):\r\n    id = serializers.IntegerField(required=False)\r\n\r\n    class Meta:\r\n        model = Feature\r\n        fields = [\r\n            'id',\r\n            'model',\r\n            'feature'\r\n        ]\r\n        read_only_fields = ('model',)\r\n\r\nclass ModelPrinterSerializer(serializers.ModelSerializer):\r\n    features = FeatureSerializer(many=True)\r\n\r\n    class Meta:\r\n        model = ModelPrinter\r\n        fields = [\r\n            \"id\",\r\n            \"model\",\r\n            \"created_by\",\r\n            \"features\",\r\n        ]\r\n\r\n    def create(self, validated_data):\r\n        features = validated_data.pop('features')\r\n        model = ModelPrinter.objects.create(**validated_data)\r\n        for feature in features:\r\n            Feature.objects.create(**feature, model=model)\r\n        return model\r\n\r\n    def update(self, instance, validated_data):\r\n        features = validated_data.pop('features')\r\n        instance.model = validated_data.get(\"model\", instance.model)\r\n        instance.save()\r\n        keep_features = []\r\n        for feature in features:\r\n            if \"id\" in feature.keys():\r\n                if Feature.objects.filter(id=feature[\"id\"]).exists():\r\n                    c = Feature.objects.get(id=feature[\"id\"])\r\n                    c.feature = feature.get('feature', c.feature)\r\n                    c.save()\r\n                    keep_features.append(c.id)\r\n                else:\r\n                    continue\r\n            else:\r\n                c = Feature.objects.create(**feature, model=instance)\r\n                keep_features.append(c.id)\r\n\r\n        for feature in instance.features:\r\n            if feature.id not in keep_features:\r\n                feature.delete()\r\n\r\n        return instance\r\nclass BuildingSerializer(serializers.ModelSerializer):\r\n    inst = serializers.ChoiceField(choices=Institution.choices)\r\n\r\n    class Meta:\r\n        model = Building\r\n        fields = '__all__'\r\n\r\nclass FloorSerializer(serializers.ModelSerializer):\r\n    building_code = serializers.SerializerMethodField()\r\n\r\n    class Meta:\r\n        model = Floor\r\n        fields = '__all__'\r\n\r\n    def get_building_code(self, obj):\r\n        return BuildingSerializer(obj.building_code).data\r\n\r\n\r\nclass PrinterSerializer(serializers.ModelSerializer):\r\n    floor = serializers.SerializerMethodField()\r\n    \r\n    def get_floor(self, obj):\r\n        return obj.floor.floor_code\r\n    class Meta:\r\n        model = Printer\r\n        fields = '__all__'\r\n\r\nclass PrinterMiniSerializer(serializers.ModelSerializer):\r\n    class Meta:\r\n        model = Printer\r\n        fields = [\"status\"]\r\n\r\n    def to_representation(self, instance):\r\n        data = super().to_representation(instance)\r\n        data = serializers.ModelSerializer.to_representation(self, instance)\r\n        return data\r\n\r\n\r\nclass CreatePrinterSerializer(serializers.ModelSerializer):\r\n    class Meta:\r\n        model = Printer\r\n        exclude = (\"updated_at\",)\r\n\r\n\r\nclass PrinterDetailSerializer(serializers.ModelSerializer):\r\n    model = serializers.SerializerMethodField()\r\n    floor = serializers.SerializerMethodField()\r\n\r\n    def get_floor(self, obj):\r\n        return obj.floor.floor_code\r\n\r\n    class Meta:\r\n        model = Printer\r\n        exclude = \"updated_at\"\r\n\r\n\r\nclass PrinterViewsSerializer(serializers.ModelSerializer):\r\n    class Meta:\r\n        model = PrinterViews\r\n        exclude = \"updated_at\"\r\n\r\nclass OrderPrinterSerializer(serializers.Serializer):\r\n    class Meta:\r\n        model = OrderPrinter\r\n        fields = '__all__'\r\n        read_only_fields = ('ink_status', 'model')
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/api/printer/serializers.py b/backend/api/printer/serializers.py
--- a/backend/api/printer/serializers.py	(revision e46ae16479e3ae90444be49b1302a015ffff3e1b)
+++ b/backend/api/printer/serializers.py	(date 1701526164270)
@@ -122,4 +122,16 @@
     class Meta:
         model = OrderPrinter
         fields = '__all__'
-        read_only_fields = ('ink_status', 'model')
\ No newline at end of file
+        read_only_fields = ('ink_status', 'model')
+
+class PrinterSerializer(serializers.ModelSerializer):
+    class Meta:
+        model = Printer
+        fields = '__all__'
+class OrderPrinterSerializer(serializers.ModelSerializer):
+    class Meta:
+        model = OrderPrinter
+        fields = '__all__'
+class FileuploadSerializer(serializers.Serializer):
+    file_upload=serializers.FileField()
+    pagenumber=serializers.IntegerField()
\ No newline at end of file
Index: backend/api/printer/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import requests\r\nfrom django.shortcuts import render, reverse, redirect, get_object_or_404\r\nfrom django.http import Http404, HttpResponse, HttpResponseRedirect, JsonResponse\r\nfrom django.contrib.auth.decorators import login_required\r\nfrom django.utils.decorators import method_decorator\r\nfrom django.views.generic import View\r\nfrom django.views.decorators.csrf import csrf_exempt\r\nfrom django.views.generic.edit import CreateView\r\nfrom django.db.models import Q\r\n\r\nfrom rest_framework.parsers import JSONParser\r\nfrom rest_framework.views import APIView\r\nfrom rest_framework.response import Response\r\nfrom rest_framework import status\r\nfrom rest_framework import generics\r\nfrom rest_framework import mixins\r\nfrom rest_framework import filters\r\nfrom rest_framework.decorators import action\r\nfrom .permissions import IsOwnerAuth, ModelViewSetsPermission\r\nfrom .models import *\r\nfrom .serializers import *\r\nfrom rest_framework.authentication import SessionAuthentication, BasicAuthentication, TokenAuthentication\r\nfrom rest_framework.permissions import IsAuthenticated, IsAdminUser\r\nfrom rest_framework import viewsets\r\nfrom rest_framework.decorators import action\r\n\r\nfrom rest_framework.generics import (\r\n    ListAPIView,\r\n    RetrieveAPIView,\r\n    CreateAPIView,\r\n    DestroyAPIView,\r\n)\r\n\r\nfrom django_filters.rest_framework import DjangoFilterBackend\r\nfrom django_filters import FilterSet\r\n# from django_filters.filters import OrderingFilter as o\r\n\r\nfrom django.core.cache import cache\r\nfrom django.conf import settings\r\nfrom django.core.cache.backends.base import DEFAULT_TIMEOUT\r\nfrom django.utils.decorators import method_decorator\r\nfrom django.views.decorators.cache import cache_page\r\nfrom django.views.decorators.vary import vary_on_cookie\r\nfrom django.utils.translation import gettext_lazy as _\r\n\r\nfrom django_elasticsearch_dsl_drf.constants import LOOKUP_FILTER_GEO_DISTANCE\r\nfrom django_elasticsearch_dsl_drf.filter_backends import (\r\n    FilteringFilterBackend,\r\n    OrderingFilterBackend,\r\n    SearchFilterBackend,\r\n    DefaultOrderingFilterBackend,\r\n)\r\n\r\nclass ModelPrinterViewSet(viewsets.ModelViewSet):\r\n    serializer_class = ModelPrinterSerializer\r\n    queryset = ModelPrinter.objects.all()\r\n    lookup_field = 'id'\r\n    filter_backends = (DjangoFilterBackend,)\r\n    authentication_classes = (TokenAuthentication,)\r\n\r\n\r\n    @action(detail=True, methods=[\"GET\"])\r\n    def features(self, request, id=None):\r\n        model = self.get_object()\r\n        features = Feature.objects.filter(model=model)\r\n        serializer = FeatureSerializer(features, many=True)\r\n        return Response(serializer.data, status=200)\r\n\r\n    @action(detail=True, methods=[\"POST\"])\r\n    def feature(self, request, id=None):\r\n        model = self.get_object()\r\n        data = request.data\r\n        data[\"model\"] = model.id\r\n        serializer = FeatureSerializer(data=data)\r\n        if serializer.is_valid():\r\n            serializer.save()\r\n            return Response(serializer.data, status=201)\r\n        return Response(serializer.erros, status=400)\r\n\r\n\r\n\r\nclass ModelPrinterListView(generics.GenericAPIView,\r\n                    mixins.ListModelMixin,\r\n                    mixins.CreateModelMixin,\r\n                    mixins.RetrieveModelMixin,\r\n                    mixins.UpdateModelMixin,\r\n                    mixins.DestroyModelMixin):\r\n    serializer_class = ModelPrinterSerializer\r\n    queryset = ModelPrinter.objects.all()\r\n    lookup_field = 'id'\r\n    authentication_classes = [TokenAuthentication, SessionAuthentication, BasicAuthentication]\r\n    permission_classes = [IsAuthenticated, IsAdminUser]\r\n\r\n\r\n\r\n    def get(self, request, id=None):\r\n        if id:\r\n            return self.retrieve(request, id)\r\n        else:\r\n            return self.list(request)\r\n\r\n    def post(self, request):\r\n        return self.create(request)\r\n\r\n    def perform_create(self, serializer):\r\n        serializer.save(created_by=self.request.user)\r\n\r\n    def put(self, request, id=None):\r\n        return self.update(request, id)\r\n\r\n    def perform_update(self, serializer):\r\n        print(self.request.user)\r\n        serializer.save(created_by=self.request.user)        \r\n\r\n    def delete(self, request, id=None):\r\n        return self.destroy(request, id)\r\n\r\n\r\n\r\nclass ModelPrinterAPIView(APIView):\r\n    def get(self, request):\r\n        models = ModelPrinter.objects.all()\r\n        serailizer = ModelPrinterSerializer(models, many=True)\r\n        return Response(serailizer.data, status=200)\r\n\r\n    def post(self, request):\r\n        data = request.data\r\n        serializer = ModelPrinterSerializer(data=data)\r\n        if serializer.is_valid():\r\n            serializer.save()\r\n            return Response(serializer.data, status=201)\r\n        return Response(serializer.erros, status=400)\r\n\r\nclass ListPrinterView(viewsets.ModelViewSet):\r\n    # permission_classes = (ModelViewSetsPermission,)\r\n    serializer_class = CreatePrinterSerializer\r\n    filter_backends = (\r\n        DjangoFilterBackend,\r\n        filters.OrderingFilter,\r\n    )\r\n    search_fields = (\"floor\",)\r\n    ordering_fields = (\"created_at\",)\r\n    filter_fields = (\"status\",)\r\n    queryset = Printer.objects.all()\r\n\r\n    # def list(self, request, *args, **kwargs):\r\n    #     queryset = self.filter_queryset(self.get_queryset())\r\n    #     print(\"queryset -> \", queryset)\r\n    #     serializer = self.get_serializer(queryset, many=True)\r\n    #     return Response(serializer)\r\n\r\n    def update(self, request, *args, **kwargs):\r\n        return super(ListPrinterView, self).update(request, *args, **kwargs)\r\n    # authentication_classes = [TokenAuthentication]\r\n    permission_classes = [IsAuthenticated]\r\n\r\n    def get(self, request):\r\n        printers = Printer.objects.all()\r\n        serializer = PrinterSerializer(printers, many=True)\r\n        return Response(serializer.data)\r\n\r\n    def post(self, request):\r\n        serializer = PrinterSerializer(data=request.data)\r\n        if serializer.is_valid():\r\n            serializer.save()\r\n            return Response(serializer.data, status=status.HTTP_201_CREATED)\r\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\r\nclass FloorListAPIView(ListAPIView):\r\n    # permission_classes = [permissions.IsAuthenticated]\r\n    serializer_class = FloorSerializer\r\n    filter_backends = (\r\n        DjangoFilterBackend,\r\n        filters.SearchFilter,\r\n        filters.OrderingFilter,\r\n    )\r\n    search_fields = (\"floor_code\",)\r\n    filter_fields = (\"building_code\",)\r\n    # queryset = Floor.objects.all()\r\n\r\n    def get_queryset(self):\r\n        queryset = Floor.objects.all()\r\n        return queryset\r\n\r\n\r\nclass FloorAPIView(RetrieveAPIView):\r\n    # permission_classes = [permissions.IsAuthenticated]\r\n    serializer_class = FloorSerializer\r\n    queryset = Floor.objects.all()\r\n\r\n    def retrieve(self, request, *args, **kwargs):\r\n        instance = self.get_object()\r\n        serializer = self.get_serializer(instance)\r\n\r\n        return Response(serializer.data)\r\n\r\n\r\nclass ListPrinterAPIView(ListAPIView):\r\n    serializer_class = PrinterSerializer\r\n    filter_backends = (\r\n        DjangoFilterBackend,\r\n        filters.SearchFilter,\r\n        filters.OrderingFilter,\r\n    )\r\n    search_fields = (\"floor_description\",)\r\n    ordering_fields = (\"created_at\",) # change related at to time remaining\r\n    filter_fields = (\"status\",)\r\n    queryset = Printer.objects.all()\r\n\r\n    # Cache requested url for each user for 2 hours\r\n    @method_decorator(cache_page(60 * 60 * 2))\r\n    @method_decorator(vary_on_cookie)\r\n    def list(self, request, *args, **kwargs):\r\n        queryset = self.filter_queryset(self.get_queryset())\r\n\r\n        page = self.paginate_queryset(queryset)\r\n        if page is not None:\r\n            serializer = self.get_serializer(page, many=True)\r\n            return self.get_paginated_response(serializer.data)\r\n\r\n        serializer = self.get_serializer(queryset, many=True)\r\n        return Response(serializer.data)\r\nclass CreatePrinterAPIView(CreateAPIView):\r\n    # permission_classes = [permissions.IsAuthenticated]\r\n    serializer_class = CreatePrinterSerializer\r\n\r\n    def create(self, request, *args, **kwargs):\r\n        user = request.user\r\n        serializer = self.get_serializer(data=request.data)\r\n        serializer.is_valid(raise_exception=True)\r\n        serializer.save(create_by=user)\r\n        # push_notifications(user, request.data[\"title\"], \"you have add a new printer\")\r\n        # if user.profile.phone_number:\r\n        #     send_message(user.profile.phone_number, \"Congratulations, you Created New Printer\")\r\n        return Response(serializer.data, status=status.HTTP_201_CREATED)\r\n\r\n\r\nclass DestroyPrinterAPIView(DestroyAPIView):\r\n    permission_classes = [IsOwnerAuth]\r\n    serializer_class = PrinterDetailSerializer\r\n    queryset = Printer.objects.all()\r\n\r\n    def destroy(self, request, *args, **kwargs):\r\n        instance = self.get_object()\r\n        instance.is_deleted = True\r\n        instance.save()\r\n        return Response({\"detail\": \"Printer deleted\"})\r\n\r\n\r\nclass PrinterViewsAPIView(ListAPIView):\r\n    # permission_classes = [IsOwnerAuth]\r\n    serializer_class = PrinterViewsSerializer\r\n    queryset = PrinterViews.objects.all()\r\n\r\n\r\nclass PrinterDetailView(APIView):\r\n    def get(self, request, pk):\r\n        printer = Printer.objects.get(id=pk)\r\n        x_forwarded_for = request.META.get(\"HTTP_X_FORWARDED_FOR\")\r\n        if x_forwarded_for:\r\n            ip = x_forwarded_for.split(\",\")[0]\r\n        else:\r\n            ip = request.META.get(\"REMOTE_ADDR\")\r\n\r\n        if not PrinterViews.objects.filter(printer=printer, ip=ip).exists():\r\n            PrinterViews.objects.create(printer=printer, ip=ip)\r\n\r\n\r\n            printer.save()\r\n        serializer = PrinterDetailSerializer(printer, context={\"request\": request})\r\n\r\n        return Response(serializer.data, status=status.HTTP_200_OK)\r\n\r\n    def put(self, request, pk):\r\n        printer = get_object_or_404(Printer, pk=pk)\r\n\r\n        serializer = PrinterDetailSerializer(\r\n            printer, data=request.data, context={\"request\": request}\r\n        )\r\n        serializer.is_valid(raise_exception=True)\r\n        serializer.save()\r\n        return Response(serializer.data)
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/api/printer/views.py b/backend/api/printer/views.py
--- a/backend/api/printer/views.py	(revision e46ae16479e3ae90444be49b1302a015ffff3e1b)
+++ b/backend/api/printer/views.py	(date 1701527534477)
@@ -7,7 +7,7 @@
 from django.views.decorators.csrf import csrf_exempt
 from django.views.generic.edit import CreateView
 from django.db.models import Q
-
+import base64
 from rest_framework.parsers import JSONParser
 from rest_framework.views import APIView
 from rest_framework.response import Response
@@ -278,4 +278,93 @@
         )
         serializer.is_valid(raise_exception=True)
         serializer.save()
-        return Response(serializer.data)
\ No newline at end of file
+        return Response(serializer.data)
+
+class FileUploadView(APIView):
+    def get(self, request, format=None):
+        file_upload_data = request.session.get('file_upload_data', None)
+
+        if file_upload_data is None:
+            # Provide a default response when session data is not found
+            default_response = {"message": "Session data not available"}
+            return Response(default_response)
+
+        response_data = {
+            "file_upload_data": {
+                "file_upload": file_upload_data.get('file_upload'),
+                "pagenumber": file_upload_data.get('pagenumber'),
+            },
+        }
+        return Response(response_data)
+
+    def post(self, request, format=None):
+        serializer = FileuploadSerializer(data=request.data)
+
+        if serializer.is_valid():
+            # Store file information in the session
+            file_upload = request.FILES['file_upload']
+            file_upload_data = {
+                'file_upload': {
+                    'name': file_upload.name,
+                    'size': file_upload.size,
+                    'content_type': file_upload.content_type,
+                    'base64_content': base64.b64encode(file_upload.read()).decode('utf-8'),
+                },
+                'pagenumber': serializer.validated_data['pagenumber'],
+            }
+            request.session['file_upload_data'] = file_upload_data
+            return Response(serializer.data,status=201)
+        else:
+            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
+
+class PrinterOrderView(APIView):
+    def get(self, request, format=None):
+        file_upload_data = request.session.get('file_upload_data', None)
+
+        if not file_upload_data or not file_upload_data.get('file_upload'):
+            return Response({"error": "File upload data not found"}, status=status.HTTP_400_BAD_REQUEST)
+
+        # Retrieve printers with pageremaining > pagenumber
+        printers = Printer.objects.filter(pages_remaining__gte=file_upload_data['pagenumber'])
+
+        # Serialize the printers
+        printer_serializer = PrinterSerializer(printers, many=True)
+
+        # Include file information in the response
+        response_data = {
+            "file_upload_data": {
+                "file_upload": file_upload_data['file_upload'],
+                "pagenumber": file_upload_data['pagenumber'],
+            },
+            "printers": printer_serializer.data,
+        }
+
+        return Response(response_data)
+
+    def post(self, request, format=None):
+        file_upload_data = request.session.get('file_upload_data', None)
+
+        if not file_upload_data or not file_upload_data.get('file_upload'):
+            return Response({"error": "File upload data not found"}, status=status.HTTP_400_BAD_REQUEST)
+
+        submitdata = request.data
+        submitdata['file_upload'] = file_upload_data['file_upload']
+
+        # Serialize the request data using OrderPrinterSerializer
+        serializer = OrderPrinterSerializer(data=submitdata)
+
+        if serializer.is_valid():
+            # Create a new print order
+            order_printer = serializer.save()
+
+            # Update the corresponding printer's pages_remaining
+            printer_id = int(request.data.get('printer'))
+            printer = Printer.objects.get(pk=printer_id)
+            printer.pages_remaining -= int(request.data.get('pages'))
+            printer.save()
+            # Return a success response
+            return Response({"message": "Print order submitted successfully", "data": serializer.data}, status=status.HTTP_201_CREATED)
+
+        else:
+            # Return an error response if the serializer data is invalid
+            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
\ No newline at end of file
Index: .idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
new file mode 100644
--- /dev/null	(date 1701476579177)
+++ b/.idea/.gitignore	(date 1701476579177)
@@ -0,0 +1,3 @@
+# Default ignored files
+/shelf/
+/workspace.xml
Index: .idea/SPSS_project.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/SPSS_project.iml b/.idea/SPSS_project.iml
new file mode 100644
--- /dev/null	(date 1701478495581)
+++ b/.idea/SPSS_project.iml	(date 1701478495581)
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="PYTHON_MODULE" version="4">
+  <component name="NewModuleRootManager">
+    <content url="file://$MODULE_DIR$" />
+    <orderEntry type="jdk" jdkName="HK231" jdkType="Python SDK" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+  <component name="PyDocumentationSettings">
+    <option name="format" value="PLAIN" />
+    <option name="myDocStringFormat" value="Plain" />
+  </component>
+</module>
\ No newline at end of file
Index: .idea/inspectionProfiles/Project_Default.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/inspectionProfiles/Project_Default.xml b/.idea/inspectionProfiles/Project_Default.xml
new file mode 100644
--- /dev/null	(date 1701476674739)
+++ b/.idea/inspectionProfiles/Project_Default.xml	(date 1701476674739)
@@ -0,0 +1,21 @@
+<component name="InspectionProjectProfileManager">
+  <profile version="1.0">
+    <option name="myName" value="Project Default" />
+    <inspection_tool class="PyPackageRequirementsInspection" enabled="true" level="WARNING" enabled_by_default="true">
+      <option name="ignoredPackages">
+        <value>
+          <list size="8">
+            <item index="0" class="java.lang.String" itemvalue="tqdm" />
+            <item index="1" class="java.lang.String" itemvalue="onnxruntime" />
+            <item index="2" class="java.lang.String" itemvalue="fastapi" />
+            <item index="3" class="java.lang.String" itemvalue="watchdog" />
+            <item index="4" class="java.lang.String" itemvalue="pytest" />
+            <item index="5" class="java.lang.String" itemvalue="torch" />
+            <item index="6" class="java.lang.String" itemvalue="numpy" />
+            <item index="7" class="java.lang.String" itemvalue="onnx" />
+          </list>
+        </value>
+      </option>
+    </inspection_tool>
+  </profile>
+</component>
\ No newline at end of file
Index: .idea/inspectionProfiles/profiles_settings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/inspectionProfiles/profiles_settings.xml b/.idea/inspectionProfiles/profiles_settings.xml
new file mode 100644
--- /dev/null	(date 1701476674867)
+++ b/.idea/inspectionProfiles/profiles_settings.xml	(date 1701476674867)
@@ -0,0 +1,6 @@
+<component name="InspectionProjectProfileManager">
+  <settings>
+    <option name="USE_PROJECT_PROFILE" value="false" />
+    <version value="1.0" />
+  </settings>
+</component>
\ No newline at end of file
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/modules.xml b/.idea/modules.xml
new file mode 100644
--- /dev/null	(date 1701476674827)
+++ b/.idea/modules.xml	(date 1701476674827)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/.idea/SPSS_project.iml" filepath="$PROJECT_DIR$/.idea/SPSS_project.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
--- /dev/null	(date 1701476674890)
+++ b/.idea/vcs.xml	(date 1701476674890)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
new file mode 100644
--- /dev/null	(date 1701478495588)
+++ b/.idea/misc.xml	(date 1701478495588)
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectRootManager" version="2" project-jdk-name="HK231" project-jdk-type="Python SDK" />
+  <component name="PyCharmProfessionalAdvertiser">
+    <option name="shown" value="true" />
+  </component>
+</project>
\ No newline at end of file
